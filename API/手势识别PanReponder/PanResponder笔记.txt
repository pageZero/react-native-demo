PanResponder:可以将多点触摸协调成一个手势，它使得一个单点触摸可以接受更多的触摸操作，也可以用于识别简单的多点触摸手势。

RN框架的底层的后事响应系统提供了响应处理器，PanResponder对其进行了封装。

PanResponder的基本思想：
监控屏幕上指定大小，位置的矩形区域，当手指按下这个区域中的某一点后，开发者会收到这个事件，当按压后拖动手指时，会收到手指
引发的各类事件，当手指离开这个矩形区域时，开发者也会收到相应的事件。

注意：
1. 开发者可以任意指定监视矩形区域的大小，但是在这个区域里，只有第一个按下的事件会上报和继续监视处理，如果第一个手指按下
   之后还没有离开接着第二个手指又按下来了，那么对第二个手指的各种触摸事件无法捕捉。

2. 开发者可以在屏幕上指定多个监视矩形区域，但是不能同时监视多个矩形区域的不同触摸事件。

3. 监视区域会阻止被该区域覆盖的组件接收触摸事件，eg:监视区域覆盖了一个按钮，那么就无法通过按这个按钮来触发对应的事件，只能 
   在PanResponder监听的事件处理中对触摸事件进行处理。

=================================================================================================================

使用PanResponder的步骤：
1. 指定监视区域。
可以有多个，但是一定不能重叠，否则都失效。

2. 定义监视区域相关变量
指向监视区域的变量（必须有），指向监视区域的变量（可以有，比如说在触摸过程中需要改变监视区域的大小），记录监视区域左上角顶
点坐标的两个数值变量（可以有），上一次触摸点的横纵坐标变量（可以有）。

3. 准备监视器的事件的处理函数。（有13个）

4. 建立监视器（PanResponder.create）

5. 将监视器与监视区域关联{...this.watcher.panHandlers}

实例：点击，拖动选择百分比参数，比如播放器的音量大小

一个gestureState对象有如下字段：

stateID - 触摸状态ID.在屏幕上有至少一个触摸点的情况下，这个ID会一直有效。

moveX - 最近一次移动时的屏幕的横坐标。

moveY - 最近一次移动时的屏幕的纵坐标。

x0 - 当响应器产生时的屏幕横坐标。

y0 - 当响应器产生时的屏幕纵坐标

dx - 从触摸操作开始是的累计横向路程。

dy - 从触摸操作开始是的累计纵向路程。

vx - 当前横向移动速度。

vy - 当前纵向移动速度。

numberActiveTouches - 当前在屏幕上的有效触摸点的数目。

如果获取以上属性值：在回调事件中取到gestureState,gestureState.moveX.